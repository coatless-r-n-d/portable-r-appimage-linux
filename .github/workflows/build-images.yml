name: Build R AppImage

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      r_version:
        description: 'R Version'
        required: false
        default: '4.5.1'
        type: string
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean

env:
  R_VERSION: ${{ github.event.inputs.r_version || '4.5.1' }}
  MAKEFLAGS: "-j 2"

jobs:
  build:
    name: Build R AppImage
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
            arch_name: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
            arch_name: aarch64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up environment variables
      run: |
        echo "R_VERSION=${{ env.R_VERSION }}" >> $GITHUB_ENV
        echo "ARCH_NAME=${{ matrix.arch_name }}" >> $GITHUB_ENV
        echo "APPIMAGE_NAME=R-${{ env.R_VERSION }}-${{ matrix.arch_name }}.AppImage" >> $GITHUB_ENV

    - name: Install build dependencies
      run: |
        # Update package lists
        sudo apt-get update
        
        # Install dependencies using make
        make deps-ubuntu

    - name: Verify build script
      run: |
        make validate
        make arch-info
        make os-info

    - name: Show build configuration
      run: |
        echo "Building R AppImage:"
        echo "  R Version: ${{ env.R_VERSION }}"
        echo "  Architecture: ${{ matrix.arch_name }}"
        echo "  OS: ${{ matrix.os }}"
        echo "  Expected output: ${{ env.APPIMAGE_NAME }}"
        make show-packages

    - name: Build R AppImage
      run: |
        # Set environment variable for AppImage extraction if FUSE is not available
        export APPIMAGE_EXTRACT_AND_RUN=1
        
        # Build the AppImage
        make appimage
      timeout-minutes: 240  # 4 hours timeout for ARM64 builds

    - name: Test AppImage
      run: |
        make test
        
        # Additional tests
        if [ -f "build/${{ env.APPIMAGE_NAME }}" ]; then
          # Test basic functionality
          chmod +x "build/${{ env.APPIMAGE_NAME }}"
          
          # Test version output
          echo "Testing R version:"
          "./build/${{ env.APPIMAGE_NAME }}" --version || true
          
          # Test immutable features
          echo "Testing immutable features:"
          make test-immutable || true
          
          # Get file info
          echo "AppImage file info:"
          file "build/${{ env.APPIMAGE_NAME }}"
          ls -lh "build/${{ env.APPIMAGE_NAME }}"
        fi

    - name: Generate build summary
      run: |
        make status > build-summary-${{ matrix.arch_name }}.txt
        echo "" >> build-summary-${{ matrix.arch_name }}.txt
        echo "Build Information:" >> build-summary-${{ matrix.arch_name }}.txt
        echo "  Workflow: ${{ github.workflow }}" >> build-summary-${{ matrix.arch_name }}.txt
        echo "  Run ID: ${{ github.run_id }}" >> build-summary-${{ matrix.arch_name }}.txt
        echo "  Repository: ${{ github.repository }}" >> build-summary-${{ matrix.arch_name }}.txt
        echo "  Commit: ${{ github.sha }}" >> build-summary-${{ matrix.arch_name }}.txt
        echo "  Ref: ${{ github.ref }}" >> build-summary-${{ matrix.arch_name }}.txt
        echo "  Actor: ${{ github.actor }}" >> build-summary-${{ matrix.arch_name }}.txt
        echo "  Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build-summary-${{ matrix.arch_name }}.txt
        
        if [ -f "build/${{ env.APPIMAGE_NAME }}" ]; then
          echo "  File Size: $(du -h build/${{ env.APPIMAGE_NAME }} | cut -f1)" >> build-summary-${{ matrix.arch_name }}.txt
          echo "  File SHA256: $(sha256sum build/${{ env.APPIMAGE_NAME }} | cut -d' ' -f1)" >> build-summary-${{ matrix.arch_name }}.txt
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: r-appimage-${{ matrix.arch_name }}
        path: |
          build/${{ env.APPIMAGE_NAME }}
          build-summary-${{ matrix.arch_name }}.txt
        retention-days: 30
        if-no-files-found: warn

    - name: Upload AppImage to release (on release)
      if: github.event_name == 'release' && github.event.action == 'published'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build/${{ env.APPIMAGE_NAME }}
          build-summary-${{ matrix.arch_name }}.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    needs: build
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy AppImages and summaries from artifacts
        find artifacts -name "*.AppImage" -exec cp {} release-assets/ \;
        find artifacts -name "build-summary-*.txt" -exec cp {} release-assets/ \;
        
        # Verify we have both architectures
        echo "Checking for required AppImages:"
        x86_64_found=false
        aarch64_found=false
        
        for appimage in release-assets/*.AppImage; do
          if [[ "$appimage" == *"x86_64"* ]]; then
            echo "[OK] Found x86_64 AppImage: $(basename "$appimage")"
            x86_64_found=true
          elif [[ "$appimage" == *"aarch64"* ]]; then
            echo "[OK] Found aarch64 AppImage: $(basename "$appimage")"
            aarch64_found=true
          fi
        done
        
        if [ "$x86_64_found" = false ]; then
          echo "WARNING: x86_64 AppImage not found"
        fi
        
        if [ "$aarch64_found" = false ]; then
          echo "WARNING: aarch64 AppImage not found"
        fi
        
        # Create combined build summary
        echo "R AppImage Build Summary" > release-assets/README.txt
        echo "========================" >> release-assets/README.txt
        echo "" >> release-assets/README.txt
        echo "R Version: ${{ env.R_VERSION }}" >> release-assets/README.txt
        echo "Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-assets/README.txt
        echo "Repository: ${{ github.repository }}" >> release-assets/README.txt
        echo "Commit: ${{ github.sha }}" >> release-assets/README.txt
        echo "" >> release-assets/README.txt
        
        echo "Built AppImages:" >> release-assets/README.txt
        appimage_count=0
        for appimage in release-assets/*.AppImage; do
          if [ -f "$appimage" ]; then
            filename=$(basename "$appimage")
            size=$(du -h "$appimage" | cut -f1)
            sha256=$(sha256sum "$appimage" | cut -d' ' -f1)
            echo "  - $filename ($size, SHA256: $sha256)" >> release-assets/README.txt
            appimage_count=$((appimage_count + 1))
          fi
        done
        
        echo "" >> release-assets/README.txt
        echo "Total AppImages: $appimage_count" >> release-assets/README.txt
        echo "" >> release-assets/README.txt
        echo "Usage:" >> release-assets/README.txt
        echo "  Download the appropriate AppImage for your architecture" >> release-assets/README.txt
        echo "  Make it executable: chmod +x R-*.AppImage" >> release-assets/README.txt
        echo "  Run: ./R-*.AppImage" >> release-assets/README.txt
        echo "" >> release-assets/README.txt
        echo "This is an immutable R environment with pre-installed packages." >> release-assets/README.txt
        echo "Package installation is disabled to maintain consistency." >> release-assets/README.txt
        
        echo "Final release assets:"
        ls -la release-assets/

    - name: Extract tag name
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
        else
          TAG_NAME="r-appimage-${{ env.R_VERSION }}-$(date +'%Y%m%d-%H%M%S')"
        fi
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "R AppImage ${{ env.R_VERSION }} (${{ env.TAG_NAME }})"
        body: |
          # R AppImage ${{ env.R_VERSION }}
          
          Immutable R environment with pre-installed packages for multiple architectures.
          
          ## Features
          - R ${{ env.R_VERSION }} built from source
          - Pre-installed packages for data science and statistics
          - Immutable environment (package installation disabled)
          - Portable AppImage format
          - Multi-architecture support (x86_64, aarch64)
          
          ## Usage
          1. Download the appropriate AppImage for your architecture
          2. Make it executable: `chmod +x R-*.AppImage`
          3. Run: `./R-*.AppImage`
          
          ## Available Packages
          The AppImage includes pre-installed packages: jsonlite, httr, ggplot2, dplyr, tidyr, readr, stringr, lubridate, shiny, rmarkdown, knitr, devtools, data.table, plotly, DT
          
          ## Notes
          - This is an immutable environment - package installation is disabled
          - Use `show.available.packages()` to see all included packages
          - Built on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Commit: ${{ github.sha }}
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}